<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" id="Definitions_1x18ykk" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="2.0.1">
  <bpmn:process id="verifyOperationInputs" name="verifyOperationInputs" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>SequenceFlow_0xskvt1</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:endEvent id="EndEvent_08tqzpl">
      <bpmn:incoming>SequenceFlow_0trzs2p</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="SequenceFlow_0xskvt1" sourceRef="StartEvent_1" targetRef="verify_operation_inputs" />
    <bpmn:sequenceFlow id="SequenceFlow_0trzs2p" sourceRef="verify_operation_inputs" targetRef="EndEvent_08tqzpl" />
    <bpmn:scriptTask id="verify_operation_inputs" name="Verify operation inputs contain no null values or unresolved functions" scriptFormat="groovy">
      <bpmn:incoming>SequenceFlow_0xskvt1</bpmn:incoming>
      <bpmn:outgoing>SequenceFlow_0trzs2p</bpmn:outgoing>
      <bpmn:script>import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

def logger = LoggerFactory.getLogger("com.ericsson.so.test")

def inputs = execution.getVariable("inputs")
logger.info("Operation Inputs: {}", inputs)

inputs.each { key, val -&gt; 
    if (val == null) {
        throw new IllegalArgumentException("Found null value for property $key");
    }
    def valueAsString = val.toString()
    if (valueAsString.contains("null")) {
        throw new IllegalArgumentException("Found null value for input $key");
    } else if (valueAsString.contains("get_attribute")) {
        throw new IllegalArgumentException("Found unresolved get_attribute function for input $key");
    } else if (valueAsString.contains("get_property")) {
        throw new IllegalArgumentException("Found unresolved get_property function for input $key");
    } else if (valueAsString.contains("get_input")) {
        throw new IllegalArgumentException("Found unresolved get_input function for input $key");
    } else if (valueAsString.contains("concat")) {
        throw new IllegalArgumentException("Found unresolved concat function for input $key");
    }
}</bpmn:script>
    </bpmn:scriptTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="verifyOperationInputs">
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">
        <dc:Bounds x="173" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_08tqzpl_di" bpmnElement="EndEvent_08tqzpl">
        <dc:Bounds x="429" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="SequenceFlow_0xskvt1_di" bpmnElement="SequenceFlow_0xskvt1">
        <di:waypoint x="209" y="120" />
        <di:waypoint x="263" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="SequenceFlow_0trzs2p_di" bpmnElement="SequenceFlow_0trzs2p">
        <di:waypoint x="363" y="120" />
        <di:waypoint x="429" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="ScriptTask_0ed5wxs_di" bpmnElement="verify_operation_inputs">
        <dc:Bounds x="263" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>